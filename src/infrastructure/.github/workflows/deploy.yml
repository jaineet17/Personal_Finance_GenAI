name: Deploy Finance RAG

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Limit job time to save on GitHub Actions minutes
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src

  build-frontend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Install dependencies
        run: |
          cd frontend
          npm ci --no-audit --prefer-offline
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1  # Minimize storage usage

  deploy-frontend:
    needs: build-frontend
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './frontend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  build-backend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install --no-save
      - name: Package application
        run: |
          serverless package --package .serverless
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: .serverless
          retention-days: 1

  deploy-backend:
    needs: build-backend
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Install dependencies
        run: |
          npm install --no-save
      - name: Download backend package
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: .serverless
      - name: Deploy backend
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          serverless deploy --stage $ENVIRONMENT --package .serverless
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NODE_OPTIONS: "--max-old-space-size=1024" # Limit memory usage

  notify:
    needs: [deploy-frontend, deploy-backend]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Notify deployment status
        run: |
          echo "Deployment completed with status: ${{ needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success' && 'SUCCESS' || 'FAILURE' }}" 